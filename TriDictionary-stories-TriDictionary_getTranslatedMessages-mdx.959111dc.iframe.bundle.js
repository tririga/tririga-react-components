"use strict";(self.webpackChunk_tririga_tririga_react_components=self.webpackChunk_tririga_tririga_react_components||[]).push([[4508],{"./node_modules/@mdx-js/react/lib/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{NF:function(){return withMDXComponents},Zo:function(){return MDXProvider},ah:function(){return useMDXComponents},pC:function(){return MDXContext}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents:allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components:components,children:children,disableParentContext:disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/TriDictionary/stories/TriDictionary_getTranslatedMessages.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",ul:"ul",li:"li"},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:["\n","\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__.h_,{title:"Javascript Library/TriDictionary/getTranslatedMessages"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"method-gettranslatedmessages",children:"Method: getTranslatedMessages"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Sends a request to the server to translate a set of messages by using the TRIRIGA Dictionary. The set of messages is identified by a tag.\nThe tag is a unique string defined by the application and it is used by the server to cache the results for getTranslatedMessages requests.\nThat means that the getTranslatedMessages method always returns the same result when called with the same tag and languageId, even if the messages parameters differs from one request to another."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This behavior can be changed by setting the refresh parameter to true. In that case, the server will ignore the cached result and translate the message set again.\nThe application should send a different tag string whenever the any message to be translated is changed."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:'The cache can be cleared by flushing the "Translated UX File Cache" from the TRIRIGA System Administration Console.'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"syntax",children:"Syntax"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"getTranslatedMessages(messages, tag, languageId, refresh)\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"parameters",children:"Parameters"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"messages: An object map with the messages to be translated. Each key-and-value pair represents a message to be translated.\nThe key is a unique ID defined by the application for each message. The key is used by the application to get the translated message from the object map returned.\nThe value is the message to be translated."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"tag: A unique string that is used by the server to cache the translated messages set."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"languageId: The ID of the language to translate the messages. It is the value of the languageId field from the object returned by the standardTririgaLogin() method."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"refresh: If true, the server bypasses the cache and translates the message set again."}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"return-value",children:"Return value"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A promise that resolves to an object map with the translated messages. Each key-and-value pair represents a translated message.\nThe key is the same as the original message.\nThe value is the translated message."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:'If the languageId is 1 (that is the ID of the "English US" language), then no request is sent to the server and the method returns the messages parameter.'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"example",children:"Example"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'-- File: messages.json\n{\n  "SUMMARY_TITLE": "Reserve a meeting room",\n  "ROOM_UNAVAILABLE": "This room is not available to reserve.",\n}\n\n--File: index.js\nimport { standardTririgaLogin, getTriAppConfig, getTranslatedMessages } from "@tririga/tririga-react-components";\nimport messages from "./messages.json";\n\nconst APP_VERSION = "1.0";\n\nconst currentUser = await standardTririgaLogin();\nconst translatedMessages = null;\n\nif (currentUser != null) {\n  translatedMessages = await getTranslatedMessages(\n    messages,\n    getTriAppConfig().appExposedName + APP_VERSION,\n    currentUser.languageId\n  );\n\n  console.log(translatedMessages["SUMMARY_TITLE"]); Prints the translation of the summary title message.\n  console.log(translatedMessages["ROOM_UNAVAILABLE"]);Prints the translation of the room unavailable message.\n}\n'})})]})}__webpack_exports__.default=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);