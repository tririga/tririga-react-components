"use strict";(self.webpackChunk_tririga_tririga_react_components=self.webpackChunk_tririga_tririga_react_components||[]).push([[8727],{"./node_modules/@mdx-js/react/lib/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{NF:function(){return withMDXComponents},Zo:function(){return MDXProvider},ah:function(){return useMDXComponents},pC:function(){return MDXContext}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents:allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components:components,children:children,disableParentContext:disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/TriFloorPlan/stories/TriFloorPlan_TriDropablePlugin.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",h3:"h3",pre:"pre"},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:["\n","\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__.h_,{title:"React Components/TriFloorPlan/plugins/TriDropablePlugin"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"tridropableplugin",children:"TriDropablePlugin"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The TriDropablePlugin adds the capability of selecting of one or more spaces on the floor plan."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"parameters",children:"Parameters"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:'dropEffect: The drop effect assigned to the dragover event for dropable elements.\n"none" is assigned for non-dropable elements or if this value is not\nspecified.  This value can be overridden for individual elements by\nthe onDragover callback'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["dropable: An array of objects. Each object represents a selectable space and it\nmust have an attribute with the same name as the value of TriDropablePlugin.SPACE_ID.\nThis attribute must contain the ID of the selectable space. The format is:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"[ { [TriSelectablePlugin.SPACE_ID]: space.elementName } ]"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"format: The expected MIME format of the data.  If not specified text/plain\nis used.  If application/json is specified, the plug-in attempts\nto parse the JSON and pass the resulting object to onDrop"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"onDragover( id ): Callback called when the dragover event is recieved for a dropable\nelement.  It is passed the element Id.  It is expected to return\nthe drag effect for that element."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"onDrop( id, data ): Called when the dro pevent is recieved for a dropable element\nid: Id of target element\ndata: data for the specified MIME format if available or null"}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"examples",children:"Examples"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"adding-a-drob-target-capability-to-a-floor-plan",children:"Adding a drob target capability to a floor plan"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'import { TriFloorPlan, TriDropablePlugin } from "@tririga/tririga-react-components";\n\nexport const Dropable = () => {\n  return (\n    <TriFloorPlan\n      floorPlanId={floorPlanId}\n      plugins={[\n        {\n            type: TriDropablePlugin.type,\n            id: "dropablePlugin",\n            dropEffect: "link",\n            format: "application/json",\n            onDragover: ( id ) => { return "link"; },\n            onDrop: ( id, data ) => { handleDrop( id, data ); },\n            dropable: [\n                { [TriDropablePlugin.SPACE_ID]: "127576725" },\n                { [TriDropablePlugin.SPACE_ID]: "127576758" },\n                { [TriDropablePlugin.SPACE_ID]: "127576777" },\n                { [TriDropablePlugin.SPACE_ID]: "127576751" }\n            ],\n        },\n      ]}\n    />\n  );\n};\n'})})]})}__webpack_exports__.default=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);